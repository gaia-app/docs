{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Gaia is a Terraform UI for your Terraform modules, and self-service infrastructure. What is it? Gaia is a web application to import and run your Terraform modules. It features : importing modules from source code (Github/Gitlab) validation of Terraform variables values (mandatory variables, regex-based validation) setting up default values or masking variables for your users running modules (plan/apply/destroy) in one click and managing Terraform state team management Screenshots The module edition view allows you to edit module details, such as variables and their validation. The stack view helps you to input your variable values, and shows job results and latest output values. The job view shows you the Terraform workflow, and the logs of the plan and apply logs","title":"Home"},{"location":"#what-is-it","text":"Gaia is a web application to import and run your Terraform modules. It features : importing modules from source code (Github/Gitlab) validation of Terraform variables values (mandatory variables, regex-based validation) setting up default values or masking variables for your users running modules (plan/apply/destroy) in one click and managing Terraform state team management","title":"What is it?"},{"location":"#screenshots","text":"The module edition view allows you to edit module details, such as variables and their validation. The stack view helps you to input your variable values, and shows job results and latest output values. The job view shows you the Terraform workflow, and the logs of the plan and apply logs","title":"Screenshots"},{"location":"about/","text":"About Gaia Contributors Gaia is made with \u2764\ufe0f in \ud83c\uddeb\ud83c\uddf7 by Cyril DUBUISSON and Julien WITTOUCK About the technical choices To develop Gaia, we chose a technical-stack that we were confortable with, to be able to develop quickly, be efficient, and to avoid struggling with a language or stack we don't know. So we chose to develop mainly in Java, with Kotlin for some cool features (data classes, extension methods, pattern matching), and in VueJS for the front stuff. The runner architecture is inspired by Gitlab-CI.","title":"About Gaia"},{"location":"about/#about-gaia","text":"","title":"About Gaia"},{"location":"about/#contributors","text":"Gaia is made with \u2764\ufe0f in \ud83c\uddeb\ud83c\uddf7 by Cyril DUBUISSON and Julien WITTOUCK","title":"Contributors"},{"location":"about/#about-the-technical-choices","text":"To develop Gaia, we chose a technical-stack that we were confortable with, to be able to develop quickly, be efficient, and to avoid struggling with a language or stack we don't know. So we chose to develop mainly in Java, with Kotlin for some cool features (data classes, extension methods, pattern matching), and in VueJS for the front stuff. The runner architecture is inspired by Gitlab-CI.","title":"About the technical choices"},{"location":"configuration/database-configuration/","text":"Database configuration There are multiple ways of configuring the database connection used by Gaia, depending one how Gaia is started. source & docker-compose When starting Gaia using source code and docker-compose, a MongoDb database is created alongside Gaia, and Gaia is configured directly to use it: version : \"3\" services : gaia : build : . image : gaia ports : - '8080:8080' environment : - \"GAIA_MONGODB_URI=mongodb://mongo/gaia\" - \"GAIA_EXTERNAL_URL=http://172.17.0.1:8080\" volumes : - /var/run/docker.sock:/var/run/docker.sock mongo : build : context : . dockerfile : ./Dockerfile-db image : gaia-db To use a different MongoDb instance, replace the GAIA_MONGODB_URI environment variable with the URI of your database, and remove the provided MongoDb instance. If your database uses user/password authentication, pass them in the URL as well : version : \"3\" services : gaia : build : . image : gaia ports : - '8080:8080' environment : - \"GAIA_MONGODB_URI=mongodb+srv://gaia:gaia_database_password@gaia-gcp-europe-west1-azerty.gcp.mongodb.net/gaia?retryWrites=true&w=majority\" - \"GAIA_EXTERNAL_URL=http://172.17.0.1:8080\" volumes : - /var/run/docker.sock:/var/run/docker.sock docker When starting Gaia using docker, use environment variables to setup MongoDb URI : docker run -d \\ --name gaia-server \\ -e GAIA_MONGODB_URI = mongodb+srv://gaia:gaia_database_password@gaia-gcp-europe-west1-azerty.gcp.mongodb.net/gaia?retryWrites = true & w = majority \\ gaia-app/gaia jar When starting Gaia using the jar , you can change the MongoDb URI using JVM parameters : java -jar gaia.jar -Dgaia.mongodb.uri = mongodb+srv://gaia:gaia_database_password@gaia-gcp-europe-west1-azerty.gcp.mongodb.net/gaia?retryWrites = true & w = majority","title":"Database configuration"},{"location":"configuration/database-configuration/#database-configuration","text":"There are multiple ways of configuring the database connection used by Gaia, depending one how Gaia is started.","title":"Database configuration"},{"location":"configuration/database-configuration/#source-docker-compose","text":"When starting Gaia using source code and docker-compose, a MongoDb database is created alongside Gaia, and Gaia is configured directly to use it: version : \"3\" services : gaia : build : . image : gaia ports : - '8080:8080' environment : - \"GAIA_MONGODB_URI=mongodb://mongo/gaia\" - \"GAIA_EXTERNAL_URL=http://172.17.0.1:8080\" volumes : - /var/run/docker.sock:/var/run/docker.sock mongo : build : context : . dockerfile : ./Dockerfile-db image : gaia-db To use a different MongoDb instance, replace the GAIA_MONGODB_URI environment variable with the URI of your database, and remove the provided MongoDb instance. If your database uses user/password authentication, pass them in the URL as well : version : \"3\" services : gaia : build : . image : gaia ports : - '8080:8080' environment : - \"GAIA_MONGODB_URI=mongodb+srv://gaia:gaia_database_password@gaia-gcp-europe-west1-azerty.gcp.mongodb.net/gaia?retryWrites=true&w=majority\" - \"GAIA_EXTERNAL_URL=http://172.17.0.1:8080\" volumes : - /var/run/docker.sock:/var/run/docker.sock","title":"source &amp; docker-compose"},{"location":"configuration/database-configuration/#docker","text":"When starting Gaia using docker, use environment variables to setup MongoDb URI : docker run -d \\ --name gaia-server \\ -e GAIA_MONGODB_URI = mongodb+srv://gaia:gaia_database_password@gaia-gcp-europe-west1-azerty.gcp.mongodb.net/gaia?retryWrites = true & w = majority \\ gaia-app/gaia","title":"docker"},{"location":"configuration/database-configuration/#jar","text":"When starting Gaia using the jar , you can change the MongoDb URI using JVM parameters : java -jar gaia.jar -Dgaia.mongodb.uri = mongodb+srv://gaia:gaia_database_password@gaia-gcp-europe-west1-azerty.gcp.mongodb.net/gaia?retryWrites = true & w = majority","title":"jar"},{"location":"configuration/gaia-configuration/","text":"Gaia configuration Gaia can be configured : using property files (when running from source or with the jar ) using environment variables (when running with the jar or in docker ) Configuration parameters property env var usage default value server.port SERVER_PORT Port on which Gaia listens 8080 gaia.externalUrl GAIA_EXTERNAL_URL Externally reachable URL of Gaia http://localhost:${server.port} gaia.mongodb.uri GAIA_MONGODB_URI URI to connect to the MongoDb database mongodb://localhost:27017/gaia gaia.defaultAdminPassword GAIA_DEFAULT_ADMIN_PASSWORD Default password of the admin user admin123","title":"Gaia configuration"},{"location":"configuration/gaia-configuration/#gaia-configuration","text":"Gaia can be configured : using property files (when running from source or with the jar ) using environment variables (when running with the jar or in docker )","title":"Gaia configuration"},{"location":"configuration/gaia-configuration/#configuration-parameters","text":"property env var usage default value server.port SERVER_PORT Port on which Gaia listens 8080 gaia.externalUrl GAIA_EXTERNAL_URL Externally reachable URL of Gaia http://localhost:${server.port} gaia.mongodb.uri GAIA_MONGODB_URI URI to connect to the MongoDb database mongodb://localhost:27017/gaia gaia.defaultAdminPassword GAIA_DEFAULT_ADMIN_PASSWORD Default password of the admin user admin123","title":"Configuration parameters"},{"location":"configuration/github-integration/","text":"Github integration This page describes how to configure Gaia to integrate with Github to: be able to login using a Github account be able to import Terraform modules directly from Github Note only public repositories of the Github user can be imported for now. Create a Github OAuth App On Github, create a new OAuth App (in an organization or in your personnal account). Go to https://github.com/settings/developers, and click Register a new application . Enter the following information: Application name : Gaia Homepage URL : The URL of your Gaia instance (http://localhost:8080 if running a development instance) Application description: Gaia Authorization callback URL : Homepage URL + /auth/oauth2/github/callback Take note of the Client ID , generate a Client secret , and take note of it too. Configure Gaia for Github With docker-compose Edit your docker-compose.yml file to activate the github Spring profile, and to add your Client ID and Client Secret for the Github registration : version : \"3\" services : gaia : image : gaiaapp/gaia ports : - '8080:8080' environment : - \"GAIA_MONGODB_URI=mongodb://mongo/gaia\" - \"GAIA_EXTERNAL_URL=http://172.17.0.1:8080\" - \"GAIA_RUNNER_API_PASSWORD=123456\" - \"SPRING_PROFILES_ACTIVE=github\" - \"SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_GITHUB_CLIENT_ID=<CLIENT_ID>\" - \"SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_GITHUB_CLIENT_SECRET=<CLIENT_SECRET>\" Login with Github On the Login page, the github button should appear: Import a module from Github On the Import Module page, you should now be able to select a module from the repositories of your Github user.","title":"Github integration"},{"location":"configuration/github-integration/#github-integration","text":"This page describes how to configure Gaia to integrate with Github to: be able to login using a Github account be able to import Terraform modules directly from Github Note only public repositories of the Github user can be imported for now.","title":"Github integration"},{"location":"configuration/github-integration/#create-a-github-oauth-app","text":"On Github, create a new OAuth App (in an organization or in your personnal account). Go to https://github.com/settings/developers, and click Register a new application . Enter the following information: Application name : Gaia Homepage URL : The URL of your Gaia instance (http://localhost:8080 if running a development instance) Application description: Gaia Authorization callback URL : Homepage URL + /auth/oauth2/github/callback Take note of the Client ID , generate a Client secret , and take note of it too.","title":"Create a Github OAuth App"},{"location":"configuration/github-integration/#configure-gaia-for-github","text":"","title":"Configure Gaia for Github"},{"location":"configuration/github-integration/#with-docker-compose","text":"Edit your docker-compose.yml file to activate the github Spring profile, and to add your Client ID and Client Secret for the Github registration : version : \"3\" services : gaia : image : gaiaapp/gaia ports : - '8080:8080' environment : - \"GAIA_MONGODB_URI=mongodb://mongo/gaia\" - \"GAIA_EXTERNAL_URL=http://172.17.0.1:8080\" - \"GAIA_RUNNER_API_PASSWORD=123456\" - \"SPRING_PROFILES_ACTIVE=github\" - \"SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_GITHUB_CLIENT_ID=<CLIENT_ID>\" - \"SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_GITHUB_CLIENT_SECRET=<CLIENT_SECRET>\"","title":"With docker-compose"},{"location":"configuration/github-integration/#login-with-github","text":"On the Login page, the github button should appear:","title":"Login with Github"},{"location":"configuration/github-integration/#import-a-module-from-github","text":"On the Import Module page, you should now be able to select a module from the repositories of your Github user.","title":"Import a module from Github"},{"location":"configuration/gitlab-integration/","text":"Gitlab integration This page describes how to configure Gaia to integrate with Gitlab to: be able to login using a Gitlab account be able to import Terraform modules directly from Gitlab Note only public repositories of the Gitlab user can be imported for now. Create a Gitlab OAuth App On Github, create a new Gitlab App (in an organization or in your personnal account). Go to https://gitlab.com/-/profile/applications. Enter the following information: Application name : Gaia Redirect URI : The URL of your Gaia instance + /auth/oauth2/gitlab/callback Select the following scopes: api read_user read_api read_repository openid profile email And save. Take note of the Application ID and of the Secret . Configure Gaia for Gitlab With docker-compose Edit your docker-compose.yml file to activate the gitlab Spring profile, and to add your Application ID and Secret for the Gitlab registration : version : \"3\" services : gaia : image : gaiaapp/gaia ports : - '8080:8080' environment : - \"GAIA_MONGODB_URI=mongodb://mongo/gaia\" - \"GAIA_EXTERNAL_URL=http://172.17.0.1:8080\" - \"GAIA_RUNNER_API_PASSWORD=123456\" - \"SPRING_PROFILES_ACTIVE=gitlab\" - \"SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_GITLAB_CLIENT_ID=<APPLICATION_ID>\" - \"SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_GITLAB_CLIENT_SECRET=<SECRET>\" Login with Gitlab On the Login page, the gitlab button should appear: Import a module from Github On the Import Module page, you should now be able to select a module from the repositories of your Github user.","title":"Gitlab integration"},{"location":"configuration/gitlab-integration/#gitlab-integration","text":"This page describes how to configure Gaia to integrate with Gitlab to: be able to login using a Gitlab account be able to import Terraform modules directly from Gitlab Note only public repositories of the Gitlab user can be imported for now.","title":"Gitlab integration"},{"location":"configuration/gitlab-integration/#create-a-gitlab-oauth-app","text":"On Github, create a new Gitlab App (in an organization or in your personnal account). Go to https://gitlab.com/-/profile/applications. Enter the following information: Application name : Gaia Redirect URI : The URL of your Gaia instance + /auth/oauth2/gitlab/callback Select the following scopes: api read_user read_api read_repository openid profile email And save. Take note of the Application ID and of the Secret .","title":"Create a Gitlab OAuth App"},{"location":"configuration/gitlab-integration/#configure-gaia-for-gitlab","text":"","title":"Configure Gaia for Gitlab"},{"location":"configuration/gitlab-integration/#with-docker-compose","text":"Edit your docker-compose.yml file to activate the gitlab Spring profile, and to add your Application ID and Secret for the Gitlab registration : version : \"3\" services : gaia : image : gaiaapp/gaia ports : - '8080:8080' environment : - \"GAIA_MONGODB_URI=mongodb://mongo/gaia\" - \"GAIA_EXTERNAL_URL=http://172.17.0.1:8080\" - \"GAIA_RUNNER_API_PASSWORD=123456\" - \"SPRING_PROFILES_ACTIVE=gitlab\" - \"SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_GITLAB_CLIENT_ID=<APPLICATION_ID>\" - \"SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_GITLAB_CLIENT_SECRET=<SECRET>\"","title":"With docker-compose"},{"location":"configuration/gitlab-integration/#login-with-gitlab","text":"On the Login page, the gitlab button should appear:","title":"Login with Gitlab"},{"location":"configuration/gitlab-integration/#import-a-module-from-github","text":"On the Import Module page, you should now be able to select a module from the repositories of your Github user.","title":"Import a module from Github"},{"location":"configuration/runner-configuration/","text":"Gaia Runner configuration The Gaia runner can be configured : using property files (when running from source or with the jar ) using environment variables (when running with the jar in docker , or in kubernetes ) Configuration parameters property env var usage default value gaia.url GAIA_URL URL of the Gaia server http://localhost:8080 gaia.runner.concurrency GAIA_RUNNER_CONCURRENCY Number of jobs the Gaia Runner can run in parallel 10 gaia.runner.api.username GAIA_RUNNER_API_USERNAME Username to access Gaia API for the Runner gaia-runner gaia.runner.api.password GAIA_RUNNER_API_PASSWORD Password to access Gaia API for the Runner gaia.runner.executor GAIA_RUNNER_EXECUTOR The executor to use for the Runner. Valid values are docker or k8s docker The gaia.runner.api.password is mandatory. If not set, the following message will show to the console when starting the runner : *************************** APPLICATION FAILED TO START *************************** Description: Binding to target org.springframework.boot.context.properties.bind.BindException: Failed to bind properties under 'gaia.runner.api' to io.gaia_app.runner.config.RunnerConfigurationProperties$RunnerApiProperties failed: Property: gaia.runner.api.password Value: null Reason: must not be blank Action: Update your application's configuration Docker Runner By default, The Gaia Runner uses docker to run the Terraform modules. Using local docker daemon property env var usage default value gaia.runner.docker.daemonUrl GAIA_RUNNER_DOCKER_DAEMONURL URL of the Docker Daemon to use unix:///var/run/docker.sock Kubernetes Runner When the property gaia.runner.executor is set to k8s , the Runner will use the Kubernetes API to run the Terraform modules. Terraform modules are runned as simple Pods . If the Runner is running inside a Kubernetes cluster, it will try to use this cluster to run its pods. To do so, some RBAC roles and a Kubernetes ServiceAccount for the Runner should be configured to allow the Runner to start new pods, attach to them, and delete them. Info An experimental Helm chart is available on Github Namespace configuration By default, it will use the namespace the Runner is deployed in to run the Terraform pods, if the Runner runs in a kubernetes cluster. Otherwise, the gaia.runner.k8s.namespace should be set. This namespace configuration can be overrided. Properties property env var usage default value gaia.runner.k8s.namespace GAIA_RUNNER_K8S_NAMESPACE Kubernetes namespace to use when running pods in-cluster namespace RBAC Gaia Runner needs the following RBAC roles to work properly: apiGroups resource verbs usage \"\" pods create, get, delete to run gaia jobs in pods \"\" \"pods/attach\" create, get to send terraform script in pods \"\" \"pods/logs\" get to read the logs Below is a sample Kubernetes Role with the needed RBAC roles: apiVersion : rbac.authorization.k8s.io/v1 kind : Role metadata : name : gaia-runner-role rules : - apiGroups : [ \"\" ] resources : [ \"pods\" ,] verbs : [ \"create\" , \"get\" , \"delete\" ] - apiGroups : [ \"\" ] resources : [ \"pods/attach\" ] verbs : [ \"create\" , \"get\" ] - apiGroups : [ \"\" ] resources : [ \"pods/log\" ] verbs : [ \"get\" ] And the associated RoleBinding : apiVersion : rbac.authorization.k8s.io/v1 kind : RoleBinding metadata : name : gaia-runner-role-binding subjects : - kind : ServiceAccount name : gaia-runner apiGroup : rbac.authorization.k8s.io roleRef : kind : Role name : gaia-runner-role apiGroup : rbac.authorization.k8s.io","title":"Gaia Runner configuration"},{"location":"configuration/runner-configuration/#gaia-runner-configuration","text":"The Gaia runner can be configured : using property files (when running from source or with the jar ) using environment variables (when running with the jar in docker , or in kubernetes )","title":"Gaia Runner configuration"},{"location":"configuration/runner-configuration/#configuration-parameters","text":"property env var usage default value gaia.url GAIA_URL URL of the Gaia server http://localhost:8080 gaia.runner.concurrency GAIA_RUNNER_CONCURRENCY Number of jobs the Gaia Runner can run in parallel 10 gaia.runner.api.username GAIA_RUNNER_API_USERNAME Username to access Gaia API for the Runner gaia-runner gaia.runner.api.password GAIA_RUNNER_API_PASSWORD Password to access Gaia API for the Runner gaia.runner.executor GAIA_RUNNER_EXECUTOR The executor to use for the Runner. Valid values are docker or k8s docker The gaia.runner.api.password is mandatory. If not set, the following message will show to the console when starting the runner : *************************** APPLICATION FAILED TO START *************************** Description: Binding to target org.springframework.boot.context.properties.bind.BindException: Failed to bind properties under 'gaia.runner.api' to io.gaia_app.runner.config.RunnerConfigurationProperties$RunnerApiProperties failed: Property: gaia.runner.api.password Value: null Reason: must not be blank Action: Update your application's configuration","title":"Configuration parameters"},{"location":"configuration/runner-configuration/#docker-runner","text":"By default, The Gaia Runner uses docker to run the Terraform modules.","title":"Docker Runner"},{"location":"configuration/runner-configuration/#using-local-docker-daemon","text":"property env var usage default value gaia.runner.docker.daemonUrl GAIA_RUNNER_DOCKER_DAEMONURL URL of the Docker Daemon to use unix:///var/run/docker.sock","title":"Using local docker daemon"},{"location":"configuration/runner-configuration/#kubernetes-runner","text":"When the property gaia.runner.executor is set to k8s , the Runner will use the Kubernetes API to run the Terraform modules. Terraform modules are runned as simple Pods . If the Runner is running inside a Kubernetes cluster, it will try to use this cluster to run its pods. To do so, some RBAC roles and a Kubernetes ServiceAccount for the Runner should be configured to allow the Runner to start new pods, attach to them, and delete them. Info An experimental Helm chart is available on Github","title":"Kubernetes Runner"},{"location":"configuration/runner-configuration/#namespace-configuration","text":"By default, it will use the namespace the Runner is deployed in to run the Terraform pods, if the Runner runs in a kubernetes cluster. Otherwise, the gaia.runner.k8s.namespace should be set. This namespace configuration can be overrided.","title":"Namespace configuration"},{"location":"configuration/runner-configuration/#properties","text":"property env var usage default value gaia.runner.k8s.namespace GAIA_RUNNER_K8S_NAMESPACE Kubernetes namespace to use when running pods in-cluster namespace","title":"Properties"},{"location":"configuration/runner-configuration/#rbac","text":"Gaia Runner needs the following RBAC roles to work properly: apiGroups resource verbs usage \"\" pods create, get, delete to run gaia jobs in pods \"\" \"pods/attach\" create, get to send terraform script in pods \"\" \"pods/logs\" get to read the logs Below is a sample Kubernetes Role with the needed RBAC roles: apiVersion : rbac.authorization.k8s.io/v1 kind : Role metadata : name : gaia-runner-role rules : - apiGroups : [ \"\" ] resources : [ \"pods\" ,] verbs : [ \"create\" , \"get\" , \"delete\" ] - apiGroups : [ \"\" ] resources : [ \"pods/attach\" ] verbs : [ \"create\" , \"get\" ] - apiGroups : [ \"\" ] resources : [ \"pods/log\" ] verbs : [ \"get\" ] And the associated RoleBinding : apiVersion : rbac.authorization.k8s.io/v1 kind : RoleBinding metadata : name : gaia-runner-role-binding subjects : - kind : ServiceAccount name : gaia-runner apiGroup : rbac.authorization.k8s.io roleRef : kind : Role name : gaia-runner-role apiGroup : rbac.authorization.k8s.io","title":"RBAC"},{"location":"credentials/aws/","text":"AWS credentials Gaia supports credentials for the AWS terraform provider. The credentials are injected as environment variables in the runner. The following fields are supported: credential field env var required Access Key Id AWS_ACCESS_KEY_ID true Secret Access Key AWS_SECRET_ACCESS_KEY true When using Vault integration, all the fields are encrypted. Screenshots AWS Credentials edition: Links See the terraform documentation for details about the AWS terraform provider authentication.","title":"AWS"},{"location":"credentials/aws/#aws-credentials","text":"Gaia supports credentials for the AWS terraform provider. The credentials are injected as environment variables in the runner. The following fields are supported: credential field env var required Access Key Id AWS_ACCESS_KEY_ID true Secret Access Key AWS_SECRET_ACCESS_KEY true When using Vault integration, all the fields are encrypted.","title":"AWS credentials"},{"location":"credentials/aws/#screenshots","text":"AWS Credentials edition:","title":"Screenshots"},{"location":"credentials/aws/#links","text":"See the terraform documentation for details about the AWS terraform provider authentication.","title":"Links"},{"location":"credentials/azurerm/","text":"AzureRM credentials Gaia supports credentials for the AzureRM terraform provider. The credentials are injected as environment variables in the runner. The following fields are supported: credential field env var required Client Id ARM_CLIENT_ID true Client Secret ARM_CLIENT_SECRET true Subscription Id ARM_SUBSCRIPTION_ID true Tenant Id ARM_TENANT_ID true Backend Access Key ARM_ACCESS_KEY false Environment ARM_ENVIRONMENT false When using Vault integration, all the fields are encrypted. Screenshots AzureRM Credentials edition: Links See the terraform documentation for details about the AzureRM terraform provider authentication.","title":"AzureRM"},{"location":"credentials/azurerm/#azurerm-credentials","text":"Gaia supports credentials for the AzureRM terraform provider. The credentials are injected as environment variables in the runner. The following fields are supported: credential field env var required Client Id ARM_CLIENT_ID true Client Secret ARM_CLIENT_SECRET true Subscription Id ARM_SUBSCRIPTION_ID true Tenant Id ARM_TENANT_ID true Backend Access Key ARM_ACCESS_KEY false Environment ARM_ENVIRONMENT false When using Vault integration, all the fields are encrypted.","title":"AzureRM credentials"},{"location":"credentials/azurerm/#screenshots","text":"AzureRM Credentials edition:","title":"Screenshots"},{"location":"credentials/azurerm/#links","text":"See the terraform documentation for details about the AzureRM terraform provider authentication.","title":"Links"},{"location":"credentials/gcp/","text":"GCP credentials Gaia supports credentials for the Google terraform provider. The credentials are injected as environment variables in the runner. The following fields are supported: credential field env var required Service Account Key File GOOGLE_CREDENTIALS true Project GOOGLE_PROJECT false When using Vault integration, all the fields are encrypted. Screenshots GCP Credentials edition: Links See the terraform documentation for details about the GCP terraform provider authentication.","title":"GCP"},{"location":"credentials/gcp/#gcp-credentials","text":"Gaia supports credentials for the Google terraform provider. The credentials are injected as environment variables in the runner. The following fields are supported: credential field env var required Service Account Key File GOOGLE_CREDENTIALS true Project GOOGLE_PROJECT false When using Vault integration, all the fields are encrypted.","title":"GCP credentials"},{"location":"credentials/gcp/#screenshots","text":"GCP Credentials edition:","title":"Screenshots"},{"location":"credentials/gcp/#links","text":"See the terraform documentation for details about the GCP terraform provider authentication.","title":"Links"},{"location":"getting-started/concepts/","text":"Gaia concepts Module A module is a container for multiple resources that are used together. Modules can be used to create lightweight abstractions, so that you can describe your infrastructure in terms of its architecture, rather than directly in terms of physical objects. Terraform documentation Gaia modules translates exactly to Terraform modules. Gaia modules can be created manually from a simple URL, or can be imported from Github or Gitlab when using OAuth2 authentication and Registries integration. Stack A stack is the instanciation of a Gaia module, using variables and credentials. It has its own lifecycle. It can be roughly compared to Terraform workspaces. Instanciation of cloud resources, using terraform scripts is done by the Jobs. Thus, a stack can be created in Gaia, without having to really instanciate all the ressources a terraform apply could create. Job A job is either : the instanciation of a stack ( terraform plan > terraform apply ) the update of a stack ( terraform plan > terraform apply ) the deleting of a stack ( terraform plan --destroy > terraform destroy ) A stack can thus be destroyed at some time, Gaia will save the variables to use them if the stack needs to be re-created at some time. Step A step is the smallest execution that Gaia can manage. Depending on the Job type, it can be: terraform plan terraform apply terraform plan --destroy terraform destroy Each step is run in isolation. Credentials Gaia supports credentials management by allowing administrators to store credentials, and make them usable by Gaia users in their stacks. Credentials can take multiple forms, depending on the target Terraform provider that will be used in the Module and in the Stack access keys for AWS & Azure modules service account JSON for GCP modules When using Vault integration, Gaia securely encrypts the credentials before storing them in the database, using a Transit engine. Gaia can also use AWS secret engine to dynamically generate AWS access credentials.","title":"Gaia concepts"},{"location":"getting-started/concepts/#gaia-concepts","text":"","title":"Gaia concepts"},{"location":"getting-started/concepts/#module","text":"A module is a container for multiple resources that are used together. Modules can be used to create lightweight abstractions, so that you can describe your infrastructure in terms of its architecture, rather than directly in terms of physical objects. Terraform documentation Gaia modules translates exactly to Terraform modules. Gaia modules can be created manually from a simple URL, or can be imported from Github or Gitlab when using OAuth2 authentication and Registries integration.","title":"Module"},{"location":"getting-started/concepts/#stack","text":"A stack is the instanciation of a Gaia module, using variables and credentials. It has its own lifecycle. It can be roughly compared to Terraform workspaces. Instanciation of cloud resources, using terraform scripts is done by the Jobs. Thus, a stack can be created in Gaia, without having to really instanciate all the ressources a terraform apply could create.","title":"Stack"},{"location":"getting-started/concepts/#job","text":"A job is either : the instanciation of a stack ( terraform plan > terraform apply ) the update of a stack ( terraform plan > terraform apply ) the deleting of a stack ( terraform plan --destroy > terraform destroy ) A stack can thus be destroyed at some time, Gaia will save the variables to use them if the stack needs to be re-created at some time.","title":"Job"},{"location":"getting-started/concepts/#step","text":"A step is the smallest execution that Gaia can manage. Depending on the Job type, it can be: terraform plan terraform apply terraform plan --destroy terraform destroy Each step is run in isolation.","title":"Step"},{"location":"getting-started/concepts/#credentials","text":"Gaia supports credentials management by allowing administrators to store credentials, and make them usable by Gaia users in their stacks. Credentials can take multiple forms, depending on the target Terraform provider that will be used in the Module and in the Stack access keys for AWS & Azure modules service account JSON for GCP modules When using Vault integration, Gaia securely encrypts the credentials before storing them in the database, using a Transit engine. Gaia can also use AWS secret engine to dynamically generate AWS access credentials.","title":"Credentials"},{"location":"getting-started/quick-start/","text":"QuickStart Pre-requisites Gaia needs : a Docker daemon (used to run Terraform itself), or a Kubernetes cluster a MongoDb database (to store its data) Getting started with Kubernetes & Helm Prerequisites Access to a Kubernetes cluster (version 1.22 minimum) helm version 3.8 minimum kubectl version 1.22 minimum Create a namespace in your cluster for Gaia: kubectl create namespace gaia Install the Helm chart for Gaia in the created namespace using the following command: helm install gaia https://github.com/gaia-app/chart/archive/refs/tags/v0.1.2.tar.gz --namespace gaia When gaia is started, get the URL of the service by running: kubectl get svc --namespace gaia The expected output is: NAME TYPE CLUSTER-IP EXTERNAL-IP PORT(S) AGE gaia LoadBalancer <cluster-ip> <ext-ip> 80:<port>/TCP 6m39s gaia-database ClusterIP <cluster-ip> <none> 27017/TCP 6m39s Take note of the <ext-ip> and the <port> and open your browser to http://<ext-ip>:<port> Getting started with docker-compose & pre-build images Prerequisites docker version 20.10.14 minimum docker-compose version 1.29 minimum Create the following docker-compose.yml file version : \"3.9\" services : gaia : image : \"gaiaapp/gaia\" ports : - \"8080:8080\" environment : - \"GAIA_MONGODB_URI=mongodb://mongo/gaia\" - \"GAIA_RUNNER_API_PASSWORD=123456\" - \"GAIA_EXTERNAL_URL=http://gaia:8080\" runner : image : \"gaiaapp/runner\" environment : - \"GAIA_URL=http://gaia:8080\" - \"GAIA_RUNNER_API_PASSWORD=123456\" volumes : - \"/var/run/docker.sock:/var/run/docker.sock\" mongo : image : \"mongo:4.4\" Then, run docker-compose up -d . When Gaia is started, open http://localhost:8080 on your browser. Getting started with source-code & Docker Prerequisites docker version 20.10.14 minimum docker-compose version 1.29 minimum Using docker-compose The Gaia source code contains several docker-compose files to help users getting started quickly. Start Gaia & a MongoDb database Clone the Gaia repository & run docker-compose: git clone git@github.com:gaia-app/gaia.git cd gaia docker-compose up -d Start Gaia-Runner Clone the runner repository & run docker-compose: git clone git@github.com:gaia-app/runner.git cd runner docker-compose up -d Getting started with source code, Maven & Java Prerequisites Java 17 Maven version 3.8+ Build Gaia with maven Clone the Gaia repository, & run mvn package to build and executable jar of Gaia: git clone git@github.com:gaia-app/gaia.git cd gaia mvn package -DskipTests An executable jar will be build in the target directory. Run Gaia as a jar Run the executable jar with the following command: java -jar target/gaia-2.3.0.jar To configure the database, see database-configuration Login Go to http://localhost:8080 Default credentials are : admin account with ROLE_ADMIN username: admin password: admin123 user account with ROLE_USER username: user password: user123","title":"QuickStart"},{"location":"getting-started/quick-start/#quickstart","text":"","title":"QuickStart"},{"location":"getting-started/quick-start/#pre-requisites","text":"Gaia needs : a Docker daemon (used to run Terraform itself), or a Kubernetes cluster a MongoDb database (to store its data)","title":"Pre-requisites"},{"location":"getting-started/quick-start/#getting-started-with-kubernetes-helm","text":"Prerequisites Access to a Kubernetes cluster (version 1.22 minimum) helm version 3.8 minimum kubectl version 1.22 minimum Create a namespace in your cluster for Gaia: kubectl create namespace gaia Install the Helm chart for Gaia in the created namespace using the following command: helm install gaia https://github.com/gaia-app/chart/archive/refs/tags/v0.1.2.tar.gz --namespace gaia When gaia is started, get the URL of the service by running: kubectl get svc --namespace gaia The expected output is: NAME TYPE CLUSTER-IP EXTERNAL-IP PORT(S) AGE gaia LoadBalancer <cluster-ip> <ext-ip> 80:<port>/TCP 6m39s gaia-database ClusterIP <cluster-ip> <none> 27017/TCP 6m39s Take note of the <ext-ip> and the <port> and open your browser to http://<ext-ip>:<port>","title":"Getting started with Kubernetes &amp; Helm"},{"location":"getting-started/quick-start/#getting-started-with-docker-compose-pre-build-images","text":"Prerequisites docker version 20.10.14 minimum docker-compose version 1.29 minimum Create the following docker-compose.yml file version : \"3.9\" services : gaia : image : \"gaiaapp/gaia\" ports : - \"8080:8080\" environment : - \"GAIA_MONGODB_URI=mongodb://mongo/gaia\" - \"GAIA_RUNNER_API_PASSWORD=123456\" - \"GAIA_EXTERNAL_URL=http://gaia:8080\" runner : image : \"gaiaapp/runner\" environment : - \"GAIA_URL=http://gaia:8080\" - \"GAIA_RUNNER_API_PASSWORD=123456\" volumes : - \"/var/run/docker.sock:/var/run/docker.sock\" mongo : image : \"mongo:4.4\" Then, run docker-compose up -d . When Gaia is started, open http://localhost:8080 on your browser.","title":"Getting started with docker-compose &amp; pre-build images"},{"location":"getting-started/quick-start/#getting-started-with-source-code-docker","text":"Prerequisites docker version 20.10.14 minimum docker-compose version 1.29 minimum","title":"Getting started with source-code &amp; Docker"},{"location":"getting-started/quick-start/#using-docker-compose","text":"The Gaia source code contains several docker-compose files to help users getting started quickly.","title":"Using docker-compose"},{"location":"getting-started/quick-start/#start-gaia-a-mongodb-database","text":"Clone the Gaia repository & run docker-compose: git clone git@github.com:gaia-app/gaia.git cd gaia docker-compose up -d","title":"Start Gaia &amp; a MongoDb database"},{"location":"getting-started/quick-start/#start-gaia-runner","text":"Clone the runner repository & run docker-compose: git clone git@github.com:gaia-app/runner.git cd runner docker-compose up -d","title":"Start Gaia-Runner"},{"location":"getting-started/quick-start/#getting-started-with-source-code-maven-java","text":"Prerequisites Java 17 Maven version 3.8+","title":"Getting started with source code, Maven &amp; Java"},{"location":"getting-started/quick-start/#build-gaia-with-maven","text":"Clone the Gaia repository, & run mvn package to build and executable jar of Gaia: git clone git@github.com:gaia-app/gaia.git cd gaia mvn package -DskipTests An executable jar will be build in the target directory.","title":"Build Gaia with maven"},{"location":"getting-started/quick-start/#run-gaia-as-a-jar","text":"Run the executable jar with the following command: java -jar target/gaia-2.3.0.jar To configure the database, see database-configuration","title":"Run Gaia as a jar"},{"location":"getting-started/quick-start/#login","text":"Go to http://localhost:8080 Default credentials are : admin account with ROLE_ADMIN username: admin password: admin123 user account with ROLE_USER username: user password: user123","title":"Login"}]}